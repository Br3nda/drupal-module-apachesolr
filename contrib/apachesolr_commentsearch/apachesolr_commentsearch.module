<?php


/**
 * Implements hook_apachesolr_document_handlers().
 *
 * @param string $type
 *   Entity type. 'node', 'comment', and so forth. Used to evaluate whether this module
 *   should be interested in creating documents.
 * @param string $namespace
 *   Usually the name of the module that is initiating indexing. In this case
 *   we want to register a handler if the namespace is 'apachesolr_search'.
 * @return array $handlers
 *   An array of strings that are function names. Each function returns a $document from
 *   an entity (of type $type).
 */
function apachesolr_commentsearch_apachesolr_document_handlers($type, $namespace) {
  if ($type == 'node' && $namespace == 'apachesolr_search') {
    return array('apachesolr_commentsearch_node_to_comments');
  }
}

function apachesolr_commentsearch_node_to_comments($node, $namespace) {
  $documents = array();
  $result = comment_load_multiple(FALSE, array('nid' => $node->nid));
  foreach($result as $comment){
    $text = check_markup($comment->comment_body[LANGUAGE_NONE][0]['value'], $comment->comment_body[LANGUAGE_NONE][0]['format']);

    $document = new Apache_Solr_Document();
    // Comments have their status integers backwards compared to nodes.
    // Here we use the logic that the status of the comment is dependent both on the node and
    // the comment. If the node is published, we look to see if the comment is published, too.
    // If either the node or the comment are not published, the status of the comment
    // will get published as 0.
    $document->status = $node->status ? ($comment->status == COMMENT_PUBLISHED ? 1 : 0) : 0;
    if ($document->status == 0) {
      // don't index unpublished comments.
      continue;
    }
    $document->id = apachesolr_document_id($comment->cid, 'comment');
    $document->is_cid = $comment->cid;
    $document->site = url(NULL, array('absolute' => TRUE));
    $document->hash = apachesolr_site_hash();
    $document->entity = 'comment';

    // Since the nid of this comment is set, when the node gets deleted,
    // the comment will also get removed from the index. See apachesolr_delete_node_from_index()
    $document->nid = $comment->nid;
    $document->uid = $comment->uid;
    $title = empty($comment->subject) ? $node->title : $comment->subject;
    $document->title = apachesolr_clean_text($title);
    if (empty($node->language)) {
      // 'und' is the language-neutral code in Drupal 7.
      $document->language = 'und';
    }
    else {
      $document->language = $node->language;
    }
    $document->body = apachesolr_clean_text($text);
    $document->type = 'comment';
    $document->type_name = 'Comment';
    $document->created = apachesolr_date_iso($comment->created);
    $document->changed = apachesolr_date_iso($comment->changed);
    $last_change = (isset($node->last_comment_timestamp) && $node->last_comment_timestamp > $node->changed) ? $node->last_comment_timestamp : $node->changed;
    $document->last_comment_or_change = apachesolr_date_iso($last_change);
    $document->name = htmlspecialchars(html_entity_decode($comment->name, ENT_NOQUOTES, 'UTF-8'), ENT_NOQUOTES, 'UTF-8');
    $path = "node/{$node->nid}";
    $document->url = url($path, array('absolute' => TRUE, 'fragment' => "comment-{$comment->cid}"));
    $document->path = $path;
    $document->comment_count = 0;
    $documents[] = $document;
  }
  return $documents;
}

function apachesolr_commentsearch_apachesolr_modify_query(&$query, &$params, $caller) {
  if (isset($params['fl'])){
    $fls = array_filter(explode(',', $params['fl']));
    $fls[] = 'is_cid';
    $params['fl'] =  implode(',', $fls);
  }
}

function apachesolr_commentsearch_apachesolr_process_results(&$results) {
  foreach ($results as $pos => $result) {
    if (isset($results[$pos]['extra']['comments'])) {
      unset($results[$pos]['extra']['comments']);
      unset($results[$pos]['extra']['cid']);
    }
  }
}

function apachesolr_commentsearch_apachesolr_search_result_alter(&$doc, &$extra) {
  if ($doc->type == 'comment') {
    $nid = $doc->nid;
    $extra['cid'] = $doc->is_cid;
    $node = node_load($nid);
    $query = apachesolr_commentsearch_page_count($node, $doc->is_cid);
    $doc->path = url($doc->path, array('absolute' => TRUE, 'fragment' => "comment-{$doc->is_cid}", 'query' => $query));
  }
}

function apachesolr_commentsearch_apachesolr_theme_breadcrumb_alter(&$breadcrumb_name) {
  // While the goal here is to hijack nearly every breadcrumb generation, we
  // can't do it if it's a ckk facet. That would step on the toes of
  // date facets, etc. So reverse the logic from apachesolr_search_apachesolr_theme_breadcrumb_alter
  // and only alter non-cck breadcrumbs.
  $matches = preg_split('/_field_/', $breadcrumb_name);
  if (!empty($matches[1])) {
    $breadcrumb_name = 'apachesolr_commentsearch_breadcrumb_type';
  }
}

/**
 * Implements hook_comment_delete()
 * Removes the comment from the index if the comment is unpublished.
 */
function apachesolr_commentsearch_comment_delete($comment){
  apachesolr_commentsearch_delete_comment_from_index($comment);
}

/**
 * Implements hook_comment_publish()
 * Removes the comment from the index if the comment is deleted.
 */
function apachesolr_commentsearch_comment_publish($comment){
  apachesolr_commentsearch_delete_comment_from_index($comment);
}


/**
 * Removes a comment from the index.
 *
 * @param object $comment
 *   The comment to remove.
 *
 * @return boolean
 *   TRUE if comment removed from index, FALSE otherwise.
 *
 * @see apachesolr_delete_node_from_index()
 */
function apachesolr_commentsearch_delete_comment_from_index($comment) {
  static $failed = FALSE;
  if ($failed) {
    return FALSE;
  }
  try {
    $solr = apachesolr_get_solr();
    $solr->deleteById(apachesolr_document_id($comment->cid, 'comment'));
    apachesolr_index_set_last_updated(REQUEST_TIME);
    return TRUE;
  }
  catch (Exception $e) {
    watchdog('Apache Solr', nl2br(check_plain($e->getMessage())), NULL, WATCHDOG_ERROR);
    // Don't keep trying queries if they are failing.
    $failed = TRUE;
    return FALSE;
  }
}

/**
 * Return the human readable text for a content type.
 */
function theme_apachesolr_commentsearch_breadcrumb_type($field) {
  $type = $field['#value'];
  if ($type == 'comment') {
    return t('Comment');
  }
  return node_type_get_name($type);
}

/**
 * Implements hook_theme().
 */
function apachesolr_commentsearch_theme() {
  return array(
    'apachesolr_commentsearch_breadcrumb_type' => array(
      'arguments' => array('field' => NULL),
    ),
  );
}

/**
 * Calculates the number of page on which the comment is displayed
 * 
 * @param object $node
 * @param int $cid
 * @return array('page' => X) where X is a number of page on which the comment is displayed
 * @see comment_get_thread()
 */
function apachesolr_commentsearch_page_count($node, $cid) {
  $comments_per_page = variable_get('comment_default_per_page_' . $node->type, 50);
  $mode = variable_get('comment_default_mode_' . $node->type, COMMENT_MODE_THREADED);  
  
  $query = db_select('comment', 'c');
  $query
    ->condition('c.nid', $node->nid)
    ->condition('c.status', COMMENT_PUBLISHED);      

  if ($mode === COMMENT_MODE_FLAT) {
    $query->condition('c.cid', $cid, '<');
  }
  else {
    $vancode = comment_load($cid)->thread;
    $query->condition('SUBSTRING(c.thread, 1, (LENGTH(c.thread) - 1))', substr($vancode, 0, -1), '<');
  }
  $count = $query->countQuery()->execute()->fetchField();

  $pageno =  $count / $comments_per_page;
  
  $pagenum = ($pageno >= 1) ? array('page' => intval($pageno)) : NULL;
  return $pagenum;
}
