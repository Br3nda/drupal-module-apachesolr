<?php
// $Id: apachesolr_search.module,v 1.1.2.14 2008/08/14 04:00:10 febbraro Exp $

/**
 * @file
 *   Provides a content search implementation for node content for use with the
 *   Apache Solr search application.
 */

function apachesolr_update_index() {
  ApacheSolrUpdate::update_index('apachesolr');
}

function apachesolr_search_search($op = 'search', $keys = NULL) {

  switch ($op) {
    case 'name':
      return t('Search');

    case 'reset':
      ApacheSolrUpdate::reset('apachesolr');
      return;

    case 'status':
      $change = ApacheSolrUpdate::get_change('apachesolr');
      $last = ApacheSolrUpdate::get_last('apachesolr');
      $total = db_result(db_query('SELECT COUNT(*) FROM {node} WHERE status = 1'));
      $remaining = db_result(db_query('SELECT COUNT(*) FROM {node} n '.
                                         'LEFT JOIN {node_comment_statistics} c ON n.nid = c.nid '.
                                         'WHERE n.status = 1 AND ((GREATEST(n.created, n.changed, c.last_comment_timestamp) = %d AND n.nid > %d ) OR (n.created > %d OR n.changed > %d OR c.last_comment_timestamp > %d))', $change, $last, $change, $change, $change));
      return array('remaining' => $remaining, 'total' => $total);

    case 'search':
      global $pager_total;
      // This is the object that does the communication with the solr server.
      $solr =& apachesolr_get_solr(variable_get('apachesolr_host', 'localhost'), variable_get('apachesolr_port', 8983), variable_get('apachesolr_path', '/solr'));
      // This is the object that knows about the query coming from the user.
      $query =& apachesolr_drupal_query($keys);
      
      try {      
        $params = array(
          'fl' => '*,score',
          'rows' => variable_get('apachesolr_rows', 10),
          'facet' => 'true',
          'facet.mincount' => 1,
          'facet.sort' => 'true'
        );
        
        foreach (apachesolr_block() as $name => $values) {
          // TODO: Instead of getting this list from apachesolr_block, there
          // should instead be an API function that gets the list FOR apachesolr_block
          // as well as for here.
          if ($name != 'sort') {
            $params['facet.field'][] = $name;
          }
        }
        
        // Facet limits
        $facet_query_limits = variable_get('apachesolr_facet_query_limits', array());
        foreach ($facet_query_limits as $fieldname => $limit) {
          $params['f.' . $fieldname . '.facet.limit'] = $limit;
        }
        if (isset($_GET['solrsort'])) {
          $sort = check_plain($_GET['solrsort']);
          $params['sort'] = $sort;
        }
        
        if ($sort = check_plain($_GET['solrsort'])) {
          $params['sort'] = $sort;
        }
        if ($fields = apachesolr_cck_fields()) {
          foreach ($fields as $name => $field) {
            $index_key = apachesolr_index_key($field);
            $params['facet.field'][] = $index_key;
          }
        }
        $params['start'] = $_GET['page'] * $params['rows'];
        $response = $solr->search($query->get_query(), $params['start'], $params['rows'], $params);
        apachesolr_has_searched(TRUE);
        $total = $response->numFound;
        // The response is cached so that it is accessible to the blocks and anything
        // else that needs it beyond the initial search.
        apachesolr_static_response_cache($response);
        pager_query("SELECT %d", $params['rows'], 0, NULL, $total);
        if ($total > 0) {
          static $users = array();
          foreach ($response->documents as $doc) {
            $extra = node_invoke_nodeapi($doc, 'search result');
            $extra['score'] = $doc->score;
            $snippet = search_excerpt($keys, $doc->body);
            if (trim($snippet) == '...') {
              $snippet = '';
            }
            $results[] = array('link' => url('node/'. $doc->nid, NULL, NULL, TRUE),
                               'type' => node_get_types('name', $doc),
                               'title' => $doc->title,
                               'user' => theme('username', $doc),
                               'date' => $doc->changed,
                               'node' => $doc,
                               'extra' => $extra,
                               'score' => $doc->score,
                               'snippet' => $snippet);
          }
          
          // Hook to allow modifications of the retrieved results
          foreach (module_implements('apachesolr_process_results') as $module) {
            $function = $module .'_apachesolr_process_results';
            call_user_func_array($function, array(&$results));
          }                    
        }
        // Set breadcrumb
        drupal_set_breadcrumb($query->get_breadcrumb());
        return $results;

      } // try
      catch (Exception $e) {
        watchdog('Apache Solr', $e->getMessage(), WATCHDOG_ERROR);
      }
      break;

  } // switch
}
