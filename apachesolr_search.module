<?php
// $Id: apachesolr_search.module,v 1.1.2.6.2.43 2008/12/10 16:12:14 pwolanin Exp $

/**
 * @file
 *   Provides a content search implementation for node content for use with the
 *   Apache Solr search application.
 */

/**
 * Implementation of hook_help().
 */
function apachesolr_search_help($section) {
  switch ($section) {
    case 'admin/settings/apachesolr/index':
      $remaining = 0;
      $total = 0;
      // Collect the stats
      $status = module_invoke('apachesolr_search', 'search', 'status');
      $remaining += $status['remaining'];
      $total += $status['total'];

      return t('Apache Solr search index is generated by !cron. %percentage of the site has been indexed. There @items left to index.', array(
        '!cron' => l(t('running cron'), 'admin/reports/status/run-cron', array('query' => array('destination' => 'admin/settings/apachesolr/index'))),
        '%percentage' => ((int)min(100, 100 * ($total - $remaining) / max(1, $total))) .'%',
        '@items' => format_plural($remaining, t('is 1 item'), t('are @count items')
      )));
  }
}

/**
 * Implementation of hook_menu().
 */
function apachesolr_search_menu() {
  $items['admin/settings/apachesolr/query_fields'] = array(
    'title'            => 'Query field settings',
    'page callback'    => 'apachesolr_search_settings_page',
    'access arguments' => array('administer site configuration'),
    'weight'           => 1,
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'apachesolr_search.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_update_index().
 */
function apachesolr_search_update_index() {
  // TODO - should probably have a separate variable.
  $cron_limit = variable_get('search_cron_limit', 100);
  $result = apachesolr_get_nodes_to_index('apachesolr_search', $cron_limit);
  apachesolr_index_nodes($result, 'apachesolr_search');
}

/**
 * Implementation of hook_search().
 */
function apachesolr_search_search($op = 'search', $keys = NULL) {

  switch ($op) {
    case 'name':
      return t('Search');

    case 'reset':
      apachesolr_clear_last_index('apachesolr_search');
      return;

    case 'status':
      return apachesolr_index_status('apachesolr_search');

    case 'search':
      global $pager_total;

      try {
        // This is the object that knows about the query coming from the user.
        $query = apachesolr_drupal_query($keys);
        if (is_null($query)) {
          throw new Exception(t('Could not construct a Solr query in function apachesolr_search_search()'));
        }

        $results = array();

        $params = array(
          //'qt' => 'standard',
          'fl' => '*,score',
          'rows' => variable_get('apachesolr_rows', 10),
          'facet' => 'true',
          'facet.mincount' => 1,
          'facet.sort' => 'true'
        );

        // TODO: This adds all of the possible facets to the query. Not all
        // of these facets have their blocks enabled, so the list should be
        // filtered by the actual enabled blocks, otherwise we're putting
        // unneeded strain on the Solr server.
        foreach (module_implements('apachesolr_facets') as $module) {
          $function = $module .'_apachesolr_facets';
          $result = call_user_func_array($function, array());
          if (isset($result) && is_array($result)) {
            foreach ($result as $facet) {
              $params['facet.field'][] = $facet;
            }
          }
        }

        // Facet limits
        $facet_query_limits = variable_get('apachesolr_facet_query_limits', array());
        foreach ($facet_query_limits as $fieldname => $limit) {
          $params['f.' . $fieldname . '.facet.limit'] = $limit;
        }

        if (isset($_GET['solrsort'])) {
          $sort = check_plain($_GET['solrsort']);
        }

        // Validate sort parameter
        if (isset($sort) && preg_match('/^([a-z0-9_]+ (asc|desc)(,)?)+$/i', $sort)) {
          $params['sort'] = $sort;
        }

        if ($fields = apachesolr_cck_fields()) {
          foreach ($fields as $name => $field) {
            $index_key = apachesolr_index_key($field);
            $params['facet.field'][] = $index_key;
          }
        }
        $page = isset($_GET['page']) ? $_GET['page'] : 0;
        $params['start'] = $page * $params['rows'];
        // This is the object that does the communication with the solr server.
        $solr = apachesolr_get_solr();

        // Note - we have query fields set in solrconfig.xml, which will operate when 
        // none are set.
        $qf = variable_get('apachesolr_search_query_fields', array());
        $fields = $solr->getFields();
        if ($qf && $fields) {
          foreach ($fields as $field_name => $field) {
            if (!empty($qf[$field_name])) {
              $params['qf'][] = $field_name . '^'. $qf[$field_name];
            }
          }
        }
        // Note: we use 2 since 1 fails on Ubuntu Hardy.
        $data = $solr->getLuke(2);
        if (isset($data->index->numDocs)) {
          $total = $data->index->numDocs;
        }
        else {
          $total = db_result(db_query("SELECT COUNT(nid) FROM {node}"));
        }
        $date_settings = variable_get('apacehsolr_search_date_boost', '4:3.0');
        list($date_steepness, $date_boost) = explode(':', $date_settings);
        // Default date-biasing function, as suggested (but steeper) at
        // http://wiki.apache.org/solr/DisMaxRequestHandler
        // rord() returns 1 for the newset doc, and the number in the index for
        // the oldest doc.  The function is thus: $total/(rord()*$steepness + $total).
        if ($date_boost) {
          $params['bf'][] = "recip(rord(changed),$date_steepness,$total,$total)^$date_boost";
        }
        $comment_settings = variable_get('apacehsolr_search_comment_boost', '4:3.0');
        list($comment_steepness, $comment_boost) = explode(':', $comment_settings);
        // Default date-biasing function, as suggested (but steeper) at
        // http://wiki.apache.org/solr/DisMaxRequestHandler
        // rord() returns 1 for the newset doc, and the number in the index for
        // the oldest doc.  The function is thus: $total/(rord()*$steepness + $total).
        if ($comment_boost) {
          $params['bf'][] = "recip(rord(comment_count),$comment_steepness,$total,$total)^$comment_boost";
        }
        /**
         * This hook allows modules to modify the query are params objects.
         *
         * Example:
         *
         *<code>
         * function my_module_apachesolr_modify_query(&$query, &$params) {
         *   // I only want to see articles by the admin!
         *   $query->add_field("uid", 1);
         *
         * }
         * </code>
         */
        // TODO - convert to drupal_alter().
        foreach (module_implements('apachesolr_modify_query') as $module) {
          $function_name = "{$module}_apachesolr_modify_query";
          $function_name($query, $params);
        }
        if (!$query) {
          return array();
        }
        // An arry of fq parameters.
        $params['fq'] = $query->get_fq();

        $response = $solr->search($query->get_query_basic(), $params['start'], $params['rows'], $params);
        // The response is cached so that it is accessible to the blocks and anything
        // else that needs it beyond the initial search.
        apachesolr_static_response_cache($response);
        apachesolr_has_searched(TRUE);
        $total = $response->response->numFound;
        pager_query("SELECT %d", $params['rows'], 0, NULL, $total);
        if ($total > 0) {
          $extra = array();
          foreach ($response->response->docs as $doc) {
            $extra += node_invoke_nodeapi($doc, 'search result');
            $extra['score'] = $doc->score;
            $snippet = search_excerpt($keys, $doc->body);
            if (trim($snippet) == '...') {
              $snippet = '';
            }
            $results[] = array('link' => $doc->url,
                               'type' => node_get_types('name', $doc),
                               'title' => $doc->title,
                               'user' => theme('username', $doc),
                               'date' => $doc->changed,
                               'node' => $doc,
                               'extra' => $extra,
                               'score' => $doc->score,
                               'snippet' => $snippet);
          }

          // Hook to allow modifications of the retrieved results
          foreach (module_implements('apachesolr_process_results') as $module) {
            $function = $module .'_apachesolr_process_results';
            call_user_func_array($function, array(&$results));
          }
        }
        // Set breadcrumb
        drupal_set_breadcrumb($query->get_breadcrumb());
        return $results;

      } // try
      catch (Exception $e) {
        watchdog('Apache Solr', $e->getMessage(), NULL, WATCHDOG_ERROR);
        apachesolr_failure(t('Solr search'), is_null($query) ? $keys : $query->get_query_basic());
      }
      break;
  } // switch
}

function apachesolr_search_apachesolr_facets() {
  return array_keys(apachesolr_search_block());
}

/**
 * Implementation of hook_block().
 */
function apachesolr_search_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks['uid'] = array('info' => t('ApacheSolr Search: Filter by author'));
      $blocks['currentsearch'] = array('info' => t('ApacheSolr Search: Current search'), 'cache' => BLOCK_CACHE_PER_PAGE);

      // Get taxonomy vocabulary facets.
      if (module_exists('taxonomy')) {
        $vocabs = taxonomy_get_vocabularies();
        foreach ($vocabs as $vid => $vocab) {
          $blocks['imfield_vid' . $vid] = array('info' => t('ApacheSolr Search: Filter by @name', array('@name' => $vocab->name)), 'cache' => BLOCK_CACHE_PER_PAGE);
        }
      }

      // Get CCK field facets.
      if ($fields = apachesolr_cck_fields()) {
        foreach ($fields as $name => $field) {
          $index_key = apachesolr_index_key($field);
          // TODO: $index_key must be wrong here.
          $blocks[$index_key] = array('info' => t('ApacheSolr Search: Filter by @field', array('@field' => $field['label'])), 'cache' => BLOCK_CACHE_PER_PAGE);
        }
      }
      return $blocks;

    case 'view':
      if (arg(1) == 'apachesolr_search' && apachesolr_has_searched()) {
        // Get the query and response. Without these no blocks make sense.
        $response = apachesolr_static_response_cache();
        if (empty($response)) {
          return;
        }
        $query = apachesolr_drupal_query();

        // Get information needed by the rest of the blocks about limits.
        $facet_display_limits = variable_get('apachesolr_facet_query_limits', array());

        // Handle taxonomy vocabulary facets
        if ((strpos($delta, 'imfield_vid') === 0) && module_exists('taxonomy')) {

          if (is_object($response->facet_counts->facet_fields->$delta)) {
            $contains_active = FALSE;
            $terms = array();

            foreach ($response->facet_counts->facet_fields->$delta as $tid => $count) {
              $unclick_link = '';
              unset($active);
              $term = taxonomy_get_term($tid);
              $new_query = clone $query;
              if ($active = $query->has_field('tid', $tid)) {
                $contains_active = TRUE;
                $new_query->remove_field('tid', $term->tid);
                $path = 'search/' . arg(1) . '/' . $new_query->get_query_basic();
                $querystring = $new_query->get_url_querystring();
                $unclick_link = theme('apachesolr_unclick_link', $path, $querystring);
              }
              else {
                $new_query->add_field('tid', $term->tid);
                $path = 'search/' . arg(1) . '/' . $new_query->get_query_basic();
                $querystring = $new_query->get_url_querystring();
              }
              $countsort = $count == 0 ? '' : 1 / $count;
              // if numdocs == 1 and !active, don't add.
              if ($response->numFound == 1 && !$active) {
                // skip
              }
              else {
                $terms[$term->vid][$active ? $countsort . $term->name : 1 + $countsort . $term->name] = theme('apachesolr_facet_item', $term->name, $count, $path, $querystring, $active, $unclick_link, $response->numFound);
              }
            }
          }
          $vid = substr($delta, 11);
          $vocab = taxonomy_vocabulary_load($vid);
          if (is_numeric($vid) && is_array($terms) && isset($terms[$vid]) && is_array($terms[$vid])) {
            ksort($terms[$vid]);
            $facet_display_limit = isset($facet_display_limits[$delta]) ? $facet_display_limits[$delta] : 10;
            $terms[$vid] = array_slice($terms[$vid], 0, ($facet_display_limit == -1 ? NULL : $facet_display_limit));
            return array('subject' => t('Filter by @name', array('@name' => $vocab->name)),
                         'content' => theme('apachesolr_facet_list', $terms[$vid]));
          }
          else {
            return;
          }
        }

        switch ($delta) {
          case 'currentsearch':
            $fields = $query->get_fields();
            $search_keys = $query->get_query_basic();
            $path = 'search/' . arg(1) . '/' . $search_keys;
            $options = array();
            if (!$fields) {
              $options['attributes']['class'] = 'active';
            }
            $links[] = apachesolr_l($search_keys, $path, $options);
            foreach($fields as $field) {
              if ($field['#name']) {
                $new_query = clone $query;
                $new_query->remove_field($field['#name'], $field['#value']);
                $path = 'search/'. arg(1) .'/'. $new_query->get_query_basic();
                $querystring = $new_query->get_url_querystring();
                $unclick_link = theme('apachesolr_unclick_link', $path, $querystring);
                if (! $fielddisplay = theme("apachesolr_breadcrumb_". $field['#name'], $field['#value'])) {
                  $fielddisplay = $field['#value'];
                }
                $links[] = theme('apachesolr_facet_item', $fielddisplay, NULL, $path, $querystring, $active, $unclick_link, $response->numFound);
              }            
            }
            $content = theme('apachesolr_currentsearch', $response->response->numFound, $links);
            return array('subject' => t('Current search'),
                         'content' => $content);

          case 'uid':
            $filter_by = t('Filter by author');
            return apachesolr_facet_block($response, $query, $delta, $filter_by, 'apachesolr_search_get_username');

          default:
           if ($fields = apachesolr_cck_fields()) {
            foreach ($fields as $name => $field) {
              $index_key = apachesolr_index_key($field);
              if ($index_key == $delta) {
                if (!empty($response->facet_counts->facet_fields->$index_key)) {
                  $contains_active = FALSE;
                  foreach ($response->facet_counts->facet_fields->$index_key as $facet => $count) {
                    $unclick_link = '';
                    unset($active);
                    $new_query = clone $query;
                    if ($active = $query->has_field($index_key, $facet)) {
                      $contains_active = TRUE;
                      $new_query->remove_field($index_key, $facet);
                      $path = 'search/'. arg(1) .'/'. $new_query->get_query_basic();
                      $querystring = $new_query->get_url_querystring();
                      $unclick_link = theme('apachesolr_unclick_link', $path, $querystring);
                    }
                    else {
                      $new_query->add_field($index_key, $facet);
                      $path = 'search/'. arg(1) .'/'. $new_query->get_query_basic();
                      $querystring = $new_query->get_url_querystring();
                    }
                    $countsort = $count == 0 ? '' : 1 / $count;
                    // if numdocs == 1 and !active, don't add.
                    if ($response->numFound == 1 && !$active) {
                      // skip
                    }
                    else {
                      $facets[$active ? $countsort . $facet : 1 + $countsort . $facet] = theme('apachesolr_facet_item', $facet, $count, $path, $querystring, $active, $unclick_link, $response->numFound);
                    }
                  }
                  if (!empty($facets)) {
                    ksort($facets);
                    $facet_display_limit = isset($facet_display_limits[$delta]) ? $facet_display_limits[$delta] : 10;
                    $facets = array_slice($facets, 0, ($facet_display_limit == -1 ? NULL : $facet_display_limit));
                    $output = theme('apachesolr_facet_list', $facets);
                    return array('subject' => t('Filter by @field', array('@field' => $field['label'])),
                                 'content' => $output);
                  }
                }
              }
            }
          }
        }
        break;
      }
      break;

    case 'configure':
      if ($delta != 'sort') {
        return apachesolr_facetcount_form($delta);
      }
      break;

    case 'save':
      if ($delta != 'sort') {
        apachesolr_facetcount_save($delta, $edit);
      }
      break;
  }
}

function apachesolr_search_get_username($facet) {
  if ($facet == 0) {
    return variable_get('anonymous', t('Anonymous'));
  }
  else {
    return db_result(db_query("SELECT name FROM {users} WHERE uid = %d", $facet));
  }
}

/**
 * Implementation of hook_theme().
 */
function apachesolr_search_theme() {
  return array(
    'apachesolr_breadcrumb_uid' => array(
      'arguments' => array('uid' => NULL),
    ),
    'apachesolr_breadcrumb_tid' => array(
      'arguments' => array('tid' => NULL),
    ),
    'apachesolr_currentsearch' => array(
      'arguments' => array('total_found' => NULL, 'links' => NULL),
    ),
  );
}

/**
 * Return the username from $uid
 */
function theme_apachesolr_breadcrumb_uid($uid) {
  return apachesolr_search_get_username($uid);
}

/**
 * Return the term name from $tid.
 */
function theme_apachesolr_breadcrumb_tid($tid) {
  $term = taxonomy_get_term($tid);
  return $term->name;
}

/**
 * Return current search block contents
 */
function theme_apachesolr_currentsearch($total_found, $links) {
  return theme_item_list($links, t('Search found @count items', array('@count' => $total_found)));
}
